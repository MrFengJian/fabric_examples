From d64592a304673b74a5a2142bbbdc72dcdf11c765 Mon Sep 17 00:00:00 2001
From: fengjianjian <fengjj@7zhilu.com>
Date: Wed, 2 Jan 2019 11:18:02 +0800
Subject: [PATCH 1/3] add rsa support

---
 .../cryptosuitebridge/cryptosuitebridge.go    | 11 ++++++++
 .../hyperledger/fabric-ca/util/csp.go         | 12 ++++++++-
 .../hyperledger/fabric/bccsp/opts.go          | 16 ++++++++++++
 .../hyperledger/fabric/bccsp/sw/keyimport.go  | 25 +++++++++++++++++++
 .../hyperledger/fabric/bccsp/sw/new.go        |  2 ++
 .../hyperledger/fabric/bccsp/sw/rsa.go        | 11 +++++---
 .../hyperledger/fabric/bccsp/utils/keys.go    |  8 ++++++
 7 files changed, 80 insertions(+), 5 deletions(-)

diff --git a/internal/github.com/hyperledger/fabric-ca/sdkpatch/cryptosuitebridge/cryptosuitebridge.go b/internal/github.com/hyperledger/fabric-ca/sdkpatch/cryptosuitebridge/cryptosuitebridge.go
index 7783583d..086a790a 100644
--- a/internal/github.com/hyperledger/fabric-ca/sdkpatch/cryptosuitebridge/cryptosuitebridge.go
+++ b/internal/github.com/hyperledger/fabric-ca/sdkpatch/cryptosuitebridge/cryptosuitebridge.go
@@ -3,6 +3,7 @@ Copyright SecureKey Technologies Inc. All Rights Reserved.
 
 SPDX-License-Identifier: Apache-2.0
 */
+
 /*
 Notice: This file has been modified for Hyperledger Fabric SDK Go usage.
 Please review third_party pinning scripts and patches for more details.
@@ -19,6 +20,7 @@ import (
 	"github.com/hyperledger/fabric-sdk-go/internal/github.com/hyperledger/fabric/bccsp/utils"
 	"github.com/hyperledger/fabric-sdk-go/pkg/common/providers/core"
 	"github.com/hyperledger/fabric-sdk-go/pkg/core/cryptosuite"
+	"crypto/rsa"
 )
 
 const (
@@ -62,6 +64,10 @@ func PrivateKeyToDER(privateKey *ecdsa.PrivateKey) ([]byte, error) {
 	return utils.PrivateKeyToDER(privateKey)
 }
 
+func RsaPrivateKeyToDer(privatekey *rsa.PrivateKey) ([]byte, error) {
+	return utils.RsaPrivateKeyToDER(privatekey)
+}
+
 //GetDefault returns default cryptosuite from bccsp factory default
 func GetDefault() core.CryptoSuite {
 	return cryptosuite.GetDefault()
@@ -117,3 +123,8 @@ func GetX509PublicKeyImportOpts(ephemeral bool) core.KeyImportOpts {
 func GetECDSAPrivateKeyImportOpts(ephemeral bool) core.KeyImportOpts {
 	return &bccsp.ECDSAPrivateKeyImportOpts{Temporary: ephemeral}
 }
+
+//GetRSAPrivateKeyImportOpts options for rsa secret key importation in DER format
+func GetRSAPrivateKeyImportOpts(ephemeral bool) core.KeyImportOpts {
+	return &bccsp.RSA2048PrivateKeyImportOpts{Temporary: ephemeral}
+}
diff --git a/internal/github.com/hyperledger/fabric-ca/util/csp.go b/internal/github.com/hyperledger/fabric-ca/util/csp.go
index 28a4fbdd..7aff9e69 100644
--- a/internal/github.com/hyperledger/fabric-ca/util/csp.go
+++ b/internal/github.com/hyperledger/fabric-ca/util/csp.go
@@ -13,6 +13,7 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
+
 /*
 Notice: This file has been modified for Hyperledger Fabric SDK Go usage.
 Please review third_party pinning scripts and patches for more details.
@@ -176,7 +177,16 @@ func ImportBCCSPKeyFromPEMBytes(keyBuff []byte, myCSP core.CryptoSuite, temporar
 		}
 		return sk, nil
 	case *rsa.PrivateKey:
-		return nil, errors.Errorf("Failed to import RSA key from %s; RSA private key import is not supported", keyFile)
+		priv, err := factory.RsaPrivateKeyToDer(key.(*rsa.PrivateKey))
+		if err != nil {
+			return nil, errors.WithMessage(err, fmt.Sprintf("failed to convert rsa private for '%s'", keyFile))
+		}
+		sk, err := myCSP.KeyImport(priv, factory.GetRSAPrivateKeyImportOpts(temporary))
+		if err != nil {
+			return nil, errors.WithMessage(err, fmt.Sprintf("Failed to import rsa private key for '%s'", keyFile))
+		}
+		return sk, nil
+		//return nil, errors.Errorf("Failed to import RSA key from %s; RSA private key import is not supported", keyFile)
 	default:
 		return nil, errors.Errorf("Failed to import key from %s: invalid secret key type", keyFile)
 	}
diff --git a/internal/github.com/hyperledger/fabric/bccsp/opts.go b/internal/github.com/hyperledger/fabric/bccsp/opts.go
index bff66b2e..4c1dbb98 100644
--- a/internal/github.com/hyperledger/fabric/bccsp/opts.go
+++ b/internal/github.com/hyperledger/fabric/bccsp/opts.go
@@ -293,6 +293,22 @@ func (opts *RSAKeyGenOpts) Ephemeral() bool {
 	return opts.Temporary
 }
 
+// RSA2048PrivateKeyImportOpts contains options for RSA2048 secret key importation in DER format
+type RSA2048PrivateKeyImportOpts struct {
+	Temporary bool
+}
+
+// Algorithm returns the key importation algorithm identifier (to be used).
+func (opts *RSA2048PrivateKeyImportOpts) Algorithm() string {
+	return RSA2048
+}
+
+// Ephemeral returns true if the key to generate has to be ephemeral,
+// false otherwise.
+func (opts *RSA2048PrivateKeyImportOpts) Ephemeral() bool {
+	return opts.Temporary
+}
+
 // ECDSAGoPublicKeyImportOpts contains options for RSA key importation from rsa.PublicKey
 type RSAGoPublicKeyImportOpts struct {
 	Temporary bool
diff --git a/internal/github.com/hyperledger/fabric/bccsp/sw/keyimport.go b/internal/github.com/hyperledger/fabric/bccsp/sw/keyimport.go
index 4a922252..48be6e64 100644
--- a/internal/github.com/hyperledger/fabric/bccsp/sw/keyimport.go
+++ b/internal/github.com/hyperledger/fabric/bccsp/sw/keyimport.go
@@ -116,6 +116,31 @@ func (*ecdsaPrivateKeyImportOptsKeyImporter) KeyImport(raw interface{}, opts bcc
 	return &ecdsaPrivateKey{ecdsaSK}, nil
 }
 
+type rsaPrivatekeyImportOptsKeyImporter struct {
+}
+
+func (*rsaPrivatekeyImportOptsKeyImporter) KeyImport(raw interface{}, opts bccsp.KeyImportOpts) (bccsp.Key, error) {
+	der, ok := raw.([]byte)
+	if !ok {
+		return nil, errors.New("[RSA2048PrivateKeyImportOpts] Invalid raw material. Expected byte array.")
+	}
+
+	if len(der) == 0 {
+		return nil, errors.New("[RSA2048PrivateKeyImportOpts] Invalid raw. It must not be nil.")
+	}
+
+	lowLevelKey, err := utils.DERToPrivateKey(der)
+	if err != nil {
+		return nil, fmt.Errorf("Failed converting PKIX to rsa public key [%s]", err)
+	}
+
+	rsaSK, ok := lowLevelKey.(*rsa.PrivateKey)
+	if !ok {
+		return nil, errors.New("Failed casting to rsa private key. Invalid raw material.")
+	}
+	return &rsaPrivateKey{rsaSK}, nil
+}
+
 type ecdsaGoPublicKeyImportOptsKeyImporter struct{}
 
 func (*ecdsaGoPublicKeyImportOptsKeyImporter) KeyImport(raw interface{}, opts bccsp.KeyImportOpts) (bccsp.Key, error) {
diff --git a/internal/github.com/hyperledger/fabric/bccsp/sw/new.go b/internal/github.com/hyperledger/fabric/bccsp/sw/new.go
index 7ea35c8b..85831467 100644
--- a/internal/github.com/hyperledger/fabric/bccsp/sw/new.go
+++ b/internal/github.com/hyperledger/fabric/bccsp/sw/new.go
@@ -3,6 +3,7 @@ Copyright IBM Corp. All Rights Reserved.
 
 SPDX-License-Identifier: Apache-2.0
 */
+
 /*
 Notice: This file has been modified for Hyperledger Fabric SDK Go usage.
 Please review third_party pinning scripts and patches for more details.
@@ -105,6 +106,7 @@ func NewWithParams(securityLevel int, hashFamily string, keyStore bccsp.KeyStore
 	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.ECDSAGoPublicKeyImportOpts{}), &ecdsaGoPublicKeyImportOptsKeyImporter{})
 	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.RSAGoPublicKeyImportOpts{}), &rsaGoPublicKeyImportOptsKeyImporter{})
 	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.X509PublicKeyImportOpts{}), &x509PublicKeyImportOptsKeyImporter{bccsp: swbccsp})
+	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.RSA2048PrivateKeyImportOpts{}), &rsaPrivatekeyImportOptsKeyImporter{})
 
 	return swbccsp, nil
 }
diff --git a/internal/github.com/hyperledger/fabric/bccsp/sw/rsa.go b/internal/github.com/hyperledger/fabric/bccsp/sw/rsa.go
index d36aba7b..ad4e3408 100644
--- a/internal/github.com/hyperledger/fabric/bccsp/sw/rsa.go
+++ b/internal/github.com/hyperledger/fabric/bccsp/sw/rsa.go
@@ -23,17 +23,18 @@ package sw
 import (
 	"crypto/rand"
 	"crypto/rsa"
-	"errors"
 	"fmt"
 
 	"github.com/hyperledger/fabric-sdk-go/internal/github.com/hyperledger/fabric/bccsp"
+	"crypto"
 )
 
 type rsaSigner struct{}
 
 func (s *rsaSigner) Sign(k bccsp.Key, digest []byte, opts bccsp.SignerOpts) ([]byte, error) {
 	if opts == nil {
-		return nil, errors.New("Invalid options. Must be different from nil.")
+		opts=&rsa.PSSOptions{SaltLength: rsa.PSSSaltLengthEqualsHash, Hash: crypto.SHA256}
+		//return nil, errors.New("Invalid options. Must be different from nil.")
 	}
 
 	return k.(*rsaPrivateKey).privKey.Sign(rand.Reader, digest, opts)
@@ -43,7 +44,8 @@ type rsaPrivateKeyVerifier struct{}
 
 func (v *rsaPrivateKeyVerifier) Verify(k bccsp.Key, signature, digest []byte, opts bccsp.SignerOpts) (bool, error) {
 	if opts == nil {
-		return false, errors.New("Invalid options. It must not be nil.")
+		opts=&rsa.PSSOptions{SaltLength: rsa.PSSSaltLengthEqualsHash, Hash: crypto.SHA256}
+		//return nil, errors.New("Invalid options. Must be different from nil.")
 	}
 	switch opts.(type) {
 	case *rsa.PSSOptions:
@@ -61,7 +63,8 @@ type rsaPublicKeyKeyVerifier struct{}
 
 func (v *rsaPublicKeyKeyVerifier) Verify(k bccsp.Key, signature, digest []byte, opts bccsp.SignerOpts) (bool, error) {
 	if opts == nil {
-		return false, errors.New("Invalid options. It must not be nil.")
+		opts=&rsa.PSSOptions{SaltLength: rsa.PSSSaltLengthEqualsHash, Hash: crypto.SHA256}
+		//return nil, errors.New("Invalid options. Must be different from nil.")
 	}
 	switch opts.(type) {
 	case *rsa.PSSOptions:
diff --git a/internal/github.com/hyperledger/fabric/bccsp/utils/keys.go b/internal/github.com/hyperledger/fabric/bccsp/utils/keys.go
index e6a739eb..f6c308bd 100644
--- a/internal/github.com/hyperledger/fabric/bccsp/utils/keys.go
+++ b/internal/github.com/hyperledger/fabric/bccsp/utils/keys.go
@@ -13,6 +13,7 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
+
 /*
 Notice: This file has been modified for Hyperledger Fabric SDK Go usage.
 Please review third_party pinning scripts and patches for more details.
@@ -78,6 +79,13 @@ func PrivateKeyToDER(privateKey *ecdsa.PrivateKey) ([]byte, error) {
 	return x509.MarshalECPrivateKey(privateKey)
 }
 
+func RsaPrivateKeyToDER(privateKey *rsa.PrivateKey) ([]byte, error) {
+	if privateKey == nil {
+		return nil, errors.New("Invalid rsa private key. It must be different from nil.")
+	}
+	return x509.MarshalPKCS1PrivateKey(privateKey), nil
+}
+
 // PrivateKeyToPEM converts the private key to PEM format.
 // EC private keys are converted to PKCS#8 format.
 // RSA private keys are converted to PKCS#1 format.
-- 
2.20.1.windows.1

