From f27b4fb1c40e9dd5d26ac29f8d63a9fc2f56119b Mon Sep 17 00:00:00 2001
From: fengjianjian <fengjj@7zhilu.com>
Date: Wed, 2 Jan 2019 14:13:05 +0800
Subject: [PATCH 1/3] add rsa support

---
 util/csp.go                                   | 11 +++++++-
 .../hyperledger/fabric/bccsp/opts.go          | 18 +++++++++++++
 .../hyperledger/fabric/bccsp/sw/keyimport.go  | 26 +++++++++++++++++++
 .../hyperledger/fabric/bccsp/sw/new.go        |  2 ++
 .../hyperledger/fabric/bccsp/sw/rsa.go        | 10 ++++---
 .../hyperledger/fabric/bccsp/utils/keys.go    | 10 +++++++
 6 files changed, 72 insertions(+), 5 deletions(-)

diff --git a/util/csp.go b/util/csp.go
index 7c566f6..625b4bd 100644
--- a/util/csp.go
+++ b/util/csp.go
@@ -238,7 +238,16 @@ func ImportBCCSPKeyFromPEM(keyFile string, myCSP bccsp.BCCSP, temporary bool) (b
 		}
 		return sk, nil
 	case *rsa.PrivateKey:
-		return nil, errors.Errorf("Failed to import RSA key from %s; RSA private key import is not supported", keyFile)
+		priv, err := utils.RsaPrivateKeyToDER(key.(*rsa.PrivateKey))
+		if err != nil {
+			return nil, errors.WithMessage(err, fmt.Sprintf("Failed to convert rsa private key for '%s'", keyFile))
+		}
+		sk, err := myCSP.KeyImport(priv, &bccsp.RSA2048PrivateKeyImportOpts{Temporary: temporary})
+		if err != nil {
+			return nil, errors.WithMessage(err, fmt.Sprintf("Failed to import rsa private key for '%s'", keyFile))
+		}
+		return sk, nil
+		//return nil, errors.Errorf("Failed to import RSA key from %s; RSA private key import is not supported", keyFile)
 	default:
 		return nil, errors.Errorf("Failed to import key from %s: invalid secret key type", keyFile)
 	}
diff --git a/vendor/github.com/hyperledger/fabric/bccsp/opts.go b/vendor/github.com/hyperledger/fabric/bccsp/opts.go
index e81e50c..127f411 100644
--- a/vendor/github.com/hyperledger/fabric/bccsp/opts.go
+++ b/vendor/github.com/hyperledger/fabric/bccsp/opts.go
@@ -289,6 +289,24 @@ func (opts *RSAKeyGenOpts) Ephemeral() bool {
 	return opts.Temporary
 }
 
+
+// RSA2048PrivateKeyImportOpts contains options for RSA2048 secret key importation in DER format
+type RSA2048PrivateKeyImportOpts struct {
+	Temporary bool
+}
+
+// Algorithm returns the key importation algorithm identifier (to be used).
+func (opts *RSA2048PrivateKeyImportOpts) Algorithm() string {
+	return RSA2048
+}
+
+// Ephemeral returns true if the key to generate has to be ephemeral,
+// false otherwise.
+func (opts *RSA2048PrivateKeyImportOpts) Ephemeral() bool {
+	return opts.Temporary
+}
+
+
 // ECDSAGoPublicKeyImportOpts contains options for RSA key importation from rsa.PublicKey
 type RSAGoPublicKeyImportOpts struct {
 	Temporary bool
diff --git a/vendor/github.com/hyperledger/fabric/bccsp/sw/keyimport.go b/vendor/github.com/hyperledger/fabric/bccsp/sw/keyimport.go
index b2003fb..d729c14 100644
--- a/vendor/github.com/hyperledger/fabric/bccsp/sw/keyimport.go
+++ b/vendor/github.com/hyperledger/fabric/bccsp/sw/keyimport.go
@@ -123,6 +123,32 @@ func (*ecdsaGoPublicKeyImportOptsKeyImporter) KeyImport(raw interface{}, opts bc
 	return &ecdsaPublicKey{lowLevelKey}, nil
 }
 
+type rsaPrivatekeyImportOptsKeyImporter struct {
+}
+
+func (*rsaPrivatekeyImportOptsKeyImporter) KeyImport(raw interface{}, opts bccsp.KeyImportOpts) (bccsp.Key, error) {
+	der, ok := raw.([]byte)
+	if !ok {
+		return nil, errors.New("[RSA2048PrivateKeyImportOpts] Invalid raw material. Expected byte array.")
+	}
+
+	if len(der) == 0 {
+		return nil, errors.New("[RSA2048PrivateKeyImportOpts] Invalid raw. It must not be nil.")
+	}
+
+	lowLevelKey, err := utils.DERToPrivateKey(der)
+	if err != nil {
+		return nil, fmt.Errorf("Failed converting PKIX to rsa public key [%s]", err)
+	}
+
+	rsaSK, ok := lowLevelKey.(*rsa.PrivateKey)
+	if !ok {
+		return nil, errors.New("Failed casting to rsa private key. Invalid raw material.")
+	}
+	return &rsaPrivateKey{rsaSK}, nil
+}
+
+
 type rsaGoPublicKeyImportOptsKeyImporter struct{}
 
 func (*rsaGoPublicKeyImportOptsKeyImporter) KeyImport(raw interface{}, opts bccsp.KeyImportOpts) (bccsp.Key, error) {
diff --git a/vendor/github.com/hyperledger/fabric/bccsp/sw/new.go b/vendor/github.com/hyperledger/fabric/bccsp/sw/new.go
index 9959fab..b6cc97d 100644
--- a/vendor/github.com/hyperledger/fabric/bccsp/sw/new.go
+++ b/vendor/github.com/hyperledger/fabric/bccsp/sw/new.go
@@ -101,6 +101,8 @@ func NewWithParams(securityLevel int, hashFamily string, keyStore bccsp.KeyStore
 	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.ECDSAGoPublicKeyImportOpts{}), &ecdsaGoPublicKeyImportOptsKeyImporter{})
 	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.RSAGoPublicKeyImportOpts{}), &rsaGoPublicKeyImportOptsKeyImporter{})
 	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.X509PublicKeyImportOpts{}), &x509PublicKeyImportOptsKeyImporter{bccsp: swbccsp})
+	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.RSA2048PrivateKeyImportOpts{}), &rsaPrivatekeyImportOptsKeyImporter{})
+
 
 	return swbccsp, nil
 }
diff --git a/vendor/github.com/hyperledger/fabric/bccsp/sw/rsa.go b/vendor/github.com/hyperledger/fabric/bccsp/sw/rsa.go
index 375990d..3a841f4 100644
--- a/vendor/github.com/hyperledger/fabric/bccsp/sw/rsa.go
+++ b/vendor/github.com/hyperledger/fabric/bccsp/sw/rsa.go
@@ -29,9 +29,9 @@ type rsaSigner struct{}
 
 func (s *rsaSigner) Sign(k bccsp.Key, digest []byte, opts bccsp.SignerOpts) ([]byte, error) {
 	if opts == nil {
-		return nil, errors.New("Invalid options. Must be different from nil.")
+		opts=&rsa.PSSOptions{SaltLength: rsa.PSSSaltLengthEqualsHash, Hash: crypto.SHA256}
+		//return nil, errors.New("Invalid options. Must be different from nil.")
 	}
-
 	return k.(*rsaPrivateKey).privKey.Sign(rand.Reader, digest, opts)
 }
 
@@ -39,7 +39,8 @@ type rsaPrivateKeyVerifier struct{}
 
 func (v *rsaPrivateKeyVerifier) Verify(k bccsp.Key, signature, digest []byte, opts bccsp.SignerOpts) (bool, error) {
 	if opts == nil {
-		return false, errors.New("Invalid options. It must not be nil.")
+		opts=&rsa.PSSOptions{SaltLength: rsa.PSSSaltLengthEqualsHash, Hash: crypto.SHA256}
+		//return nil, errors.New("Invalid options. Must be different from nil.")
 	}
 	switch opts.(type) {
 	case *rsa.PSSOptions:
@@ -57,7 +58,8 @@ type rsaPublicKeyKeyVerifier struct{}
 
 func (v *rsaPublicKeyKeyVerifier) Verify(k bccsp.Key, signature, digest []byte, opts bccsp.SignerOpts) (bool, error) {
 	if opts == nil {
-		return false, errors.New("Invalid options. It must not be nil.")
+		opts=&rsa.PSSOptions{SaltLength: rsa.PSSSaltLengthEqualsHash, Hash: crypto.SHA256}
+		//return nil, errors.New("Invalid options. Must be different from nil.")
 	}
 	switch opts.(type) {
 	case *rsa.PSSOptions:
diff --git a/vendor/github.com/hyperledger/fabric/bccsp/utils/keys.go b/vendor/github.com/hyperledger/fabric/bccsp/utils/keys.go
index ee2d928..c6662cf 100644
--- a/vendor/github.com/hyperledger/fabric/bccsp/utils/keys.go
+++ b/vendor/github.com/hyperledger/fabric/bccsp/utils/keys.go
@@ -74,6 +74,16 @@ func PrivateKeyToDER(privateKey *ecdsa.PrivateKey) ([]byte, error) {
 	return x509.MarshalECPrivateKey(privateKey)
 }
 
+// RsaPrivateKeyToDER marshals a private key to der
+func RsaPrivateKeyToDER(privateKey *rsa.PrivateKey) ([]byte, error) {
+	if privateKey == nil {
+		return nil, errors.New("Invalid rsaa private key. It must be different from nil.")
+	}
+
+	return x509.MarshalPKCS1PrivateKey(privateKey), nil
+}
+
+
 // PrivateKeyToPEM converts the private key to PEM format.
 // EC private keys are converted to PKCS#8 format.
 // RSA private keys are converted to PKCS#1 format.
-- 
2.20.1.windows.1

