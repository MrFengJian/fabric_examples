# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

networks:
  org_orderer_network:
    driver: bridge
  org1_network:
    driver: bridge
  org2_network:
    driver: bridge

services:

  orderer.example.com:
    extends:
      file:   base/docker-compose-base.yaml
      service: orderer.example.com
    container_name: orderer.example.com
    networks:
      - org_orderer_network

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    environment:
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=e2e_org1_network    
    extends:
      file:  base/docker-compose-base.yaml
      service: peer0.org1.example.com
    #第一块网卡用于监听chaincode容器的调用，必须是内部网卡；
    #否则就要设置CORE_PEER_CHAINCODELISTENADDRESS环境变量，使peer的7052端口开放给所有地址
    networks:
      - org1_network
      - org_orderer_network

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    environment:
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=e2e_org1_network    
    extends:
      file:  base/docker-compose-base.yaml
      service: peer1.org1.example.com
    networks:
      - org1_network

  peer0.org2.example.com:
    container_name: peer0.org2.example.com
    environment:
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=e2e_org2_network    
    extends:
      file:  base/docker-compose-base.yaml
      service: peer0.org2.example.com
    networks:
      - org2_network
      - org_orderer_network

  peer1.org2.example.com:
    container_name: peer1.org2.example.com
    environment:
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=e2e_org2_network
    extends:
      file:  base/docker-compose-base.yaml
      service: peer1.org2.example.com
    networks:
      - org2_network

  cli:
    container_name: cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
      - ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash -c './scripts/script.sh;sleep 3600'
    networks:
      - org_orderer_network
      - org1_network
      - org2_network
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
      - ./examples/chaincode/:/opt/gopath/src/github.com/chaincode
      - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
      - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/        
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
